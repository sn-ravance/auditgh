services:
  db:
    image: pgvector/pgvector:pg14
    container_name: portal_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5434:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./db/portal_init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 20

  postgrest:
    image: postgrest/postgrest:v12
    container_name: portal_postgrest
    depends_on:
      db:
        condition: service_healthy
    environment:
      PGRST_DB_URI: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      PGRST_DB_SCHEMAS: api
      PGRST_DB_ANON_ROLE: postgrest_anon
      PGRST_SERVER_PORT: 3000
      PGRST_JWT_SECRET: ${POSTGREST_JWT_SECRET}
    ports:
      - "3001:3000"

  redis:
    image: redis:7-alpine
    container_name: portal_redis
    profiles: ["redis"]
    ports:
      - "6379:6379"

  server:
    build:
      context: ./server
    container_name: portal_server
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
      postgrest:
        condition: service_started
    environment:
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${AUDIT_WORKSPACE_DIR:-./runs}:/workspace/runs
    ports:
      - "8080:8080"

  web:
    build:
      context: ./web
    container_name: portal_web
    depends_on:
      - server
    ports:
      - "5173:80"

volumes:
  pg_data:
